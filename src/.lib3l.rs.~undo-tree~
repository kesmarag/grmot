(undo-tree-save-format-version . 1)
"131fc3c9151e2b3c71ce3a468ddb0c55c21f52b9"
[nil nil nil nil (25336 38466 509207 367000) 0 nil]
([nil nil ((1 . 2) (t 25334 29568 170649 674000)) nil (25336 38466 509205 281000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1) (undo-tree-id2 . -1) 2) nil (25336 38466 509203 56000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -2458) (undo-tree-id1 . -1) 2459) nil (25336 38466 509199 81000) 0 nil])
([nil nil ((2458 . 2459)) nil (25336 38466 509193 535000) 0 nil])
([nil nil ((9834 . 44606) ("
                // -- layers 1,2 --
                
                // row1 : [-ik, ik]
                let tmph12_row1 = concatenate(
                    Axis(2),
                    &[
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                        (I * &k.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row2 : [-μγk, -μγκ]
                let tmph12_row2 = concatenate(
                    Axis(2),
                    &[
                        ((num::complex::Complex::new(-1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![1, .., .., ..]))
                        .view(),
                        ((num::complex::Complex::new(-1.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![0, .., .., ..]))
                        .view(),
                    ],
                )
                .unwrap();

                // row1 : [-ik, ik]
                let tmphr12_row1 = concatenate(
                    Axis(2),
                    &[
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                        (I * &k.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row2 : [-μγk, -μγκ]
                let tmphr12_row2 = concatenate(
                    Axis(2),
                    &[
                        ((num::complex::Complex::new(-1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![0, .., .., ..]))
                        .view(),
                        ((num::complex::Complex::new(-1.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![1, .., .., ..]))
                        .view(),
                    ],
                )
                .unwrap();

               

                // row1 : [ik, -iγ, -ik, -iγ]
                let tmp12_row1 = concatenate(
                    Axis(2),
                    &[
                        (I * &k.slice(s![0, .., .., ..])).view(),
                        (-I * &gm.slice(s![1, .., .., ..])).view(),
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                        (-I * &gm.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row2 : [iν, ik, iν, -ik]
                let tmp12_row2 = concatenate(
                    Axis(2),
                    &[
                        (I * &nu.slice(s![1, .., .., ..])).view(),
                        (I * &k.slice(s![0, .., .., ..])).view(),
                        (I * &nu.slice(s![0, .., .., ..])).view(),
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row3 : [2kνμ, -(kb^2-2k^2)μ, 2kνμ, (kb^2-2k^2)μ]
                let tmp12_row3 = concatenate(
                    Axis(2),
                    &[
                        ((num::complex::Complex::new(2.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &nu)
                            .slice(s![1, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(-1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![1, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &k
                            * &nu)
                            .slice(s![0, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(1.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![0, .., .., ..]))
                            .view(),
                    ],
                )
                .unwrap();

                // row4 : [(kb^2-2k^2)μ, 2kγμ, -(kb^2-2k^2)μ, 2kγμ]
                let tmp12_row4 = concatenate(
                    Axis(2),
                    &[
                        (num::complex::Complex::new(1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![1, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![1, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(-1.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![0, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![0, .., .., ..]))
                        .view(),
                    ],
                )
                .unwrap();
                // ---------------------------------------------------------------------------------------------------------------

                // row1 : [ik, -iγ, -ik, -iγ]
                let tmpr12_row1 = concatenate(
                    Axis(2),
                    &[
                        (I * &k.slice(s![0, .., .., ..])).view(),
                        (-I * &gm.slice(s![0, .., .., ..])).view(),
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                        (-I * &gm.slice(s![1, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row2 : [iν, ik, iν, -ik]
                let tmpr12_row2 = concatenate(
                    Axis(2),
                    &[
                        (I * &nu.slice(s![0, .., .., ..])).view(),
                        (I * &k.slice(s![0, .., .., ..])).view(),
                        (I * &nu.slice(s![1, .., .., ..])).view(),
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row3 : [2kνμ, -(kb^2-2k^2)μ, 2kνμ, (kb^2-2k^2)μ]
                let tmpr12_row3 = concatenate(
                    Axis(2),
                    &[
                        ((num::complex::Complex::new(2.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &k
                            * &nu)
                            .slice(s![0, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(-1.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![0, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &nu)
                            .slice(s![1, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![1, .., .., ..]))
                            .view(),
                    ],
                )
                .unwrap();

                // row4 : [(kb^2-2k^2)μ, 2kγμ, -(kb^2-2k^2)μ, 2kγμ]
                let tmpr12_row4 = concatenate(
                    Axis(2),
                    &[
                        (num::complex::Complex::new(1.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![0, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(0).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![0, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(-1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![1, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![1, .., .., ..]))
                        .view(),
                    ],
                )
                .unwrap();

                // -- layers 2,3 --

                // row1 : [-ik, ik]
                let tmph23_row1 = concatenate(
                    Axis(2),
                    &[
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                        (I * &k.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row2 : [-μγk, -μγκ]
                let tmph23_row2 = concatenate(
                    Axis(2),
                    &[
                        ((num::complex::Complex::new(-1.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![2, .., .., ..]))
                        .view(),
                        ((num::complex::Complex::new(-1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![1, .., .., ..]))
                        .view(),
                    ],
                )
                .unwrap();

                // row1 : [-ik, ik]
                let tmphr23_row1 = concatenate(
                    Axis(2),
                    &[
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                        (I * &k.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row2 : [-μγk, -μγκ]
                let tmphr23_row2 = concatenate(
                    Axis(2),
                    &[
                        ((num::complex::Complex::new(-1.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![1, .., .., ..]))
                        .view(),
                        ((num::complex::Complex::new(-1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![2, .., .., ..]))
                        .view(),
                    ],
                )
                .unwrap();

                // row1 : [ik, -iγ, -ik, -iγ]
                let tmp23_row1 = concatenate(
                    Axis(2),
                    &[
                        (I * &k.slice(s![0, .., .., ..])).view(),
                        (-I * &gm.slice(s![2, .., .., ..])).view(),
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                        (-I * &gm.slice(s![1, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row2 : [iν, ik, iν, -ik]
                let tmp23_row2 = concatenate(
                    Axis(2),
                    &[
                        (I * &nu.slice(s![2, .., .., ..])).view(),
                        (I * &k.slice(s![0, .., .., ..])).view(),
                        (I * &nu.slice(s![1, .., .., ..])).view(),
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row3 : [2kνμ, -(kb^2-2k^2)μ, 2kνμ, (kb^2-2k^2)μ]
                let tmp23_row3 = concatenate(
                    Axis(2),
                    &[
                        ((num::complex::Complex::new(2.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &k
                            * &nu)
                            .slice(s![2, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(-1.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![2, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &nu)
                            .slice(s![1, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![1, .., .., ..]))
                            .view(),
                    ],
                )
                .unwrap();

                // row4 : [(kb^2-2k^2)μ, 2kγμ, -(kb^2-2k^2)μ, 2kγμ]
                let tmp23_row4 = concatenate(
                    Axis(2),
                    &[
                        (num::complex::Complex::new(1.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![2, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![2, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(-1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![1, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![1, .., .., ..]))
                        .view(),
                    ],
                )
                .unwrap();
                // ---------------------------------------------------------------------------------------------------------------

                // row1 : [ik, -iγ, -ik, -iγ]
                let tmpr23_row1 = concatenate(
                    Axis(2),
                    &[
                        (I * &k.slice(s![0, .., .., ..])).view(),
                        (-I * &gm.slice(s![1, .., .., ..])).view(),
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                        (-I * &gm.slice(s![2, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row2 : [iν, ik, iν, -ik]
                let tmpr23_row2 = concatenate(
                    Axis(2),
                    &[
                        (I * &nu.slice(s![1, .., .., ..])).view(),
                        (I * &k.slice(s![0, .., .., ..])).view(),
                        (I * &nu.slice(s![2, .., .., ..])).view(),
                        (-I * &k.slice(s![0, .., .., ..])).view(),
                    ],
                )
                .unwrap();

                // row3 : [2kνμ, -(kb^2-2k^2)μ, 2kνμ, (kb^2-2k^2)μ]
                let tmpr23_row3 = concatenate(
                    Axis(2),
                    &[
                        ((num::complex::Complex::new(2.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &nu)
                            .slice(s![1, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(-1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![1, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &k
                            * &nu)
                            .slice(s![2, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(1.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![2, .., .., ..]))
                            .view(),
                    ],
                )
                .unwrap();

                // row4 : [(kb^2-2k^2)μ, 2kγμ, -(kb^2-2k^2)μ, 2kγμ]
                let tmpr23_row4 = concatenate(
                    Axis(2),
                    &[
                        (num::complex::Complex::new(1.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![1, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(1).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![1, .., .., ..]))
                        .view(),
                        (num::complex::Complex::new(-1.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &kb2m2k2.slice(s![2, .., .., ..]))
                            .view(),
                        ((num::complex::Complex::new(2.0 * mu_vec.get(2).unwrap(), 0.0)
                            * &k
                            * &gm)
                            .slice(s![2, .., .., ..]))
                        .view(),
                    ],
                ).unwrap();

                // end of upper layers - first part

                let mut tmp12 = stack![Axis(2), tmp12_row1, tmp12_row2, tmp12_row3, tmp12_row4];
                let mut tmpr12 =
                    stack![Axis(2), tmpr12_row1, tmpr12_row2, tmpr12_row3, tmpr12_row4];

                let mut tmp23 = stack![Axis(2), tmp23_row1, tmp23_row2, tmp23_row3, tmp23_row4];
                let mut tmpr23 =
                    stack![Axis(2), tmpr23_row1, tmpr23_row2, tmpr23_row3, tmpr23_row4];

                let mut slayer = ndarray::Array4::<c64>::zeros((
                    tmp12.len_of(Axis(0)),
                    tmp12.len_of(Axis(1)),
                    2,
                    2,
                ));
                let mut slayerh = ndarray::Array4::<c64>::zeros((
                    tmp12.len_of(Axis(0)),
                    tmp12.len_of(Axis(1)),
                    1,
                    1,
                ));

                (0..tmp12.len_of(Axis(0))).for_each(|ii| {
                    let mut tmp122 = tmp12.index_axis_mut(Axis(0), ii);
                    let mut tmp232 = tmp23.index_axis_mut(Axis(0), ii);

                    (0..tmp122.len_of(Axis(0))).for_each(|jj| {
                        let mut tmp123 = tmp122.index_axis_mut(Axis(0), jj);
                        let tmpr123: ArrayView<_, Ix2> = tmpr12.slice(s![ii, jj, .., ..]);
                        let mut tmp233 = tmp232.index_axis_mut(Axis(0), jj);
                        let tmpr233: ArrayView<_, Ix2> = tmpr23.slice(s![ii, jj, .., ..]);

                        // 1,2
                        let mut tmp123_nal = Matrix4::<c64>::new(
                            tmp123[(0, 0)],
                            tmp123[(0, 1)],
                            tmp123[(0, 2)],
                            tmp123[(0, 3)],
                            tmp123[(1, 0)],
                            tmp123[(1, 1)],
                            tmp123[(1, 2)],
                            tmp123[(1, 3)],
                            tmp123[(2, 0)],
                            tmp123[(2, 1)],
                            tmp123[(2, 2)],
                            tmp123[(2, 3)],
                            tmp123[(3, 0)],
                            tmp123[(3, 1)],
                            tmp123[(3, 2)],
                            tmp123[(3, 3)],
                        );

                        let mut tmpr123_nal = Matrix4::<c64>::new(
                            tmpr123[(0, 0)],
                            tmpr123[(0, 1)],
                            tmpr123[(0, 2)],
                            tmpr123[(0, 3)],
                            tmpr123[(1, 0)],
                            tmpr123[(1, 1)],
                            tmpr123[(1, 2)],
                            tmpr123[(1, 3)],
                            tmpr123[(2, 0)],
                            tmpr123[(2, 1)],
                            tmpr123[(2, 2)],
                            tmpr123[(2, 3)],
                            tmpr123[(3, 0)],
                            tmpr123[(3, 1)],
                            tmpr123[(3, 2)],
                            tmpr123[(3, 3)],
                        );

                        let mut tmp123_nal_inv = Matrix4::<c64>::zeros();
                        na::linalg::try_invert_to(tmp123_nal, &mut tmp123_nal_inv);

                        // 2,3
                        let mut tmp233_nal = Matrix4::<c64>::new(
                            tmp233[(0, 0)],
                            tmp233[(0, 1)],
                            tmp233[(0, 2)],
                            tmp233[(0, 3)],
                            tmp233[(1, 0)],
                            tmp233[(1, 1)],
                            tmp233[(1, 2)],
                            tmp233[(1, 3)],
                            tmp233[(2, 0)],
                            tmp233[(2, 1)],
                            tmp233[(2, 2)],
                            tmp233[(2, 3)],
                            tmp233[(3, 0)],
                            tmp233[(3, 1)],
                            tmp233[(3, 2)],
                            tmp233[(3, 3)],
                        );

                        let mut tmpr233_nal = Matrix4::<c64>::new(
                            tmpr233[(0, 0)],
                            tmpr233[(0, 1)],
                            tmpr233[(0, 2)],
                            tmpr233[(0, 3)],
                            tmpr233[(1, 0)],
                            tmpr233[(1, 1)],
                            tmpr233[(1, 2)],
                            tmpr233[(1, 3)],
                            tmpr233[(2, 0)],
                            tmpr233[(2, 1)],
                            tmpr233[(2, 2)],
                            tmpr233[(2, 3)],
                            tmpr233[(3, 0)],
                            tmpr233[(3, 1)],
                            tmpr233[(3, 2)],
                            tmpr233[(3, 3)],
                        );

                        let mut tmp233_nal_inv = Matrix4::<c64>::zeros();
                        na::linalg::try_invert_to(tmp233_nal, &mut tmp233_nal_inv);

                        // ---

                        let z1 = med3_vec[0];
                        let z2 = med3_vec[1] + med3_vec[0];
                        let z2_m_z1 = med3_vec[1];

                        // first layer
                        let e1_z1_nu = (I * &nu.slice(s![nm-3, ii, jj, 0]).sum() * z1).exp();
                        let e1_z1_gm = (I * &gm.slice(s![nm-3, ii, jj, 0]).sum() * z1).exp();

                        let e1_z1 = Matrix2::<c64>::new(e1_z1_nu, C0, C0, e1_z1_gm);
                        let e1_mz1 = Matrix2::<c64>::new(1.0 / e1_z1_nu, C0, C0, 1.0 / e1_z1_gm);

                        // second layer
                        let e2_z1_nu = (I * &nu.slice(s![nm-2, ii, jj, 0]).sum() * z1).exp();
                        let e2_z1_gm = (I * &gm.slice(s![nm-2, ii, jj, 0]).sum() * z1).exp();
                        let e2_z2_nu = (I * &nu.slice(s![nm-2, ii, jj, 0]).sum() * z2).exp();
                        let e2_z2_gm = (I * &gm.slice(s![nm-2, ii, jj, 0]).sum() * z2).exp();
                        let e2_z2_m_z1_nu = (I * &nu.slice(s![nm-2, ii, jj, 0]).sum() * z2_m_z1).exp();
                        let e2_z2_m_z1_gm = (I * &gm.slice(s![nm-2, ii, jj, 0]).sum() * z2_m_z1).exp();

                        let e2_z1 = Matrix2::<c64>::new(e2_z1_nu, C0, C0, e2_z1_gm);
                        let e2_mz1 = Matrix2::<c64>::new(1.0 / e2_z1_nu, C0, C0, 1.0 / e2_z1_gm);

                        let e2_z2 = Matrix2::<c64>::new(e2_z2_nu, C0, C0, e2_z2_gm);
                        let e2_mz2_m_z1 =
                            Matrix2::<c64>::new(1.0 / e2_z2_m_z1_nu, C0, C0, 1.0 / e2_z2_m_z1_gm);
                        let e2_mz2 = Matrix2::<c64>::new(1.0 / e2_z2_nu, C0, C0, 1.0 / e2_z2_gm);

                        // half-space
                        let e3_z2_nu = (I * &nu.slice(s![nm-1, ii, jj, 0]).sum() * z2).exp();
                        let e3_z2_gm = (I * &gm.slice(s![nm-1, ii, jj, 0]).sum() * z2).exp();

                        let e3_z2 = Matrix2::<c64>::new(e3_z2_nu, C0, C0, e3_z2_gm);
                        let e3_mz2 = Matrix2::<c64>::new(1.0 / e3_z2_nu, C0, C0, 1.0 / e3_z2_gm);

                        let tmp124 = tmp123_nal_inv * tmpr123_nal;
                        let tmp234 = tmp233_nal_inv * tmpr233_nal;

                        let td_1 = tmp124.slice((0, 0), (2, 2)) * C1 * e1_mz1;
                        let rd_1 = tmp124.slice((2, 0), (2, 2)) * C1 * e1_mz1;
                        let tu_1 = tmp124.slice((2, 2), (2, 2)) * C1;
                        let ru_1 = tmp124.slice((0, 2), (2, 2)) * C1;

                        let td_2 = tmp234.slice((0, 0), (2, 2)) * C1 * e2_mz2_m_z1;
                        let rd_2 = tmp234.slice((2, 0), (2, 2)) * C1 * e2_mz2_m_z1;
                        let tu_2 = tmp234.slice((2, 2), (2, 2)) * C1;
                        let ru_2 = tmp234.slice((0, 2), (2, 2)) * C1;

                        let mu_1 = num::complex::Complex::new(1.0 * mu_vec.get(0).unwrap(), 0.0);
                        let mu_2 = num::complex::Complex::new(1.0 * mu_vec.get(1).unwrap(), 0.0);
                        let mu_3 = num::complex::Complex::new(1.0 * mu_vec.get(2).unwrap(), 0.0);

                        let rhd_1 = (-mu_2 * &gm.slice(s![1, ii, jj, 0])
                            + mu_1 * &gm.slice(s![0, ii, jj, 0]))
                            / (mu_1 * &gm.slice(s![0, ii, jj, 0])
                                + mu_2 * &gm.slice(s![1, ii, jj, 0])); // /expigmz1;
                        let rhu_1 = (-mu_1 * &gm.slice(s![0, ii, jj, 0])
                            + mu_2 * &gm.slice(s![1, ii, jj, 0]))
                            / (mu_1 * &gm.slice(s![0, ii, jj, 0])
                                + mu_2 * &gm.slice(s![1, ii, jj, 0])); // /expigmz1;
                        let thu_1 = (2.0 * mu_2 * &gm.slice(s![1, ii, jj, 0]))
                            / (mu_1 * &gm.slice(s![0, ii, jj, 0])
                                + mu_2 * &gm.slice(s![1, ii, jj, 0]));
                        let thd_1 = (2.0 * mu_1 * &gm.slice(s![0, ii, jj, 0]))
                            / (mu_1 * &gm.slice(s![0, ii, jj, 0])
                                + mu_2 * &gm.slice(s![1, ii, jj, 0]));

                        let rhd_2 = (-mu_3 * &gm.slice(s![2, ii, jj, 0])
                            + mu_2 * &gm.slice(s![1, ii, jj, 0]))
                            / (mu_2 * &gm.slice(s![1, ii, jj, 0])
                                + mu_3 * &gm.slice(s![2, ii, jj, 0])); // /expigmz1;
                        let rhu_2 = (-mu_2 * &gm.slice(s![1, ii, jj, 0])
                            + mu_3 * &gm.slice(s![2, ii, jj, 0]))
                            / (mu_2 * &gm.slice(s![1, ii, jj, 0])
                                + mu_3 * &gm.slice(s![2, ii, jj, 0])); // /expigmz1;
                        let thu_2 = (2.0 * mu_3 * &gm.slice(s![2, ii, jj, 0]))
                            / (mu_2 * &gm.slice(s![1, ii, jj, 0])
                                + mu_3 * &gm.slice(s![2, ii, jj, 0]));
                        let thd_2 = (2.0 * mu_2 * &gm.slice(s![1, ii, jj, 0]))
                            / (mu_2 * &gm.slice(s![1, ii, jj, 0])
                                + mu_3 * &gm.slice(s![2, ii, jj, 0]));

                        let det = det_gm.slice(s![0, ii, jj, 0]).sum();
                        let ru0_00 = -g11.slice(s![0, ii, jj, 0]).sum() / det;
                        let ru0_01 = -g12.slice(s![0, ii, jj, 0]).sum() / det;
                        let ru0_10 = -g21.slice(s![0, ii, jj, 0]).sum() / det;

                        // Ru0 - free surface
                        let ru0 = Matrix2::<c64>::new(ru0_00, ru0_01, ru0_10, ru0_00);
                        let ruh0 = 1.0; //expigmz1;

                        let id = Matrix2::<c64>::identity();
                        let f12 = id * e1_z1 - rd_1 * ru0 * e1_mz1;
                        let mut f12_inv = Matrix2::<c64>::zeros();
                        na::linalg::try_invert_to(f12, &mut f12_inv);
                        let g_2_to_1 = f12_inv * tu_1 * e2_z1;
                        let m_2 = td_1 * ru0 * e1_mz1 * e2_z1 * g_2_to_1 + ru_1 * e2_z1 * e2_z1;
                        let f23 = id * e2_z2 - rd_2 * m_2 * e2_mz2;
                        let mut f23_inv = Matrix2::<c64>::zeros();
                        na::linalg::try_invert_to(f23, &mut f23_inv);
                        let g_3_to_2 = f23_inv * tu_2 * e3_z2;

                        let gh_2_to_1 =
                            C1 / (e1_z1_gm - rhd_1 * ruh0 / e1_z1_gm) * thu_1 * e2_z1_gm;
                        let mh_2 = thd_1 * ruh0 / e1_z1_gm * e2_z1_gm * &gh_2_to_1
                            + rhu_1 * e2_z1_gm * e2_z1_gm;
                        let gh_3_to_2 =
                            C1 / (e2_z2_gm - rhd_2 * mh_2 / e2_z2_gm) * thu_2 * e3_z2_gm;


                        // upper layer
                        
                        let dp = Matrix2::<c64>::new(
                            -I * k.slice(s![0, ii, jj, 0]).sum(),
                            -I * gm.slice(s![0, ii, jj, 0]).sum(),
                            I * nu.slice(s![0, ii, jj, 0]).sum(),
                            -I * k.slice(s![0, ii, jj, 0]).sum(),
                        );
                        let dm = Matrix2::<c64>::new(
                            -I * k.slice(s![0, ii, jj, 0]).sum(),
                            I * gm.slice(s![0, ii, jj, 0]).sum(),
                            -I * nu.slice(s![0, ii, jj, 0]).sum(),
                            -I * k.slice(s![0, ii, jj, 0]).sum(),
                        );
                        let gg = dm * ru0 + dp;

                        let q = gg * g_2_to_1 * g_3_to_2;
                        let q_sh = 2.0 * C1 * gh_2_to_1.sum() * gh_3_to_2.sum();

                        // nalgebra to ndarray

                        slayer[(ii, jj, 0, 0)] = q[(0, 0)].to_owned();
                        slayer[(ii, jj, 0, 1)] = q[(0, 1)].to_owned();
                        slayer[(ii, jj, 1, 0)] = q[(1, 0)].to_owned();
                        slayer[(ii, jj, 1, 1)] = q[(1, 1)].to_owned();
                        slayerh[(ii, jj, 0, 0)] = q_sh.to_owned();
                    });
                });

                let r_u_0 = 0.0;

                let rr00 = slayer
                    .slice(s![.., .., 0, 0])
                    .insert_axis(Axis(0))
                    .insert_axis(Axis(3));
                let rr01 = slayer
                    .slice(s![.., .., 0, 1])
                    .insert_axis(Axis(0))
                    .insert_axis(Axis(3));
                let rr10 = slayer
                    .slice(s![.., .., 1, 0])
                    .insert_axis(Axis(0))
                    .insert_axis(Axis(3));
                let rr11 = slayer
                    .slice(s![.., .., 1, 1])
                    .insert_axis(Axis(0))
                    .insert_axis(Axis(3));
                let rrsh = slayerh
                    .slice(s![.., .., 0, 0])
                    .insert_axis(Axis(0))
                    .insert_axis(Axis(3));

                let gm2 = gm2.slice(s![nm-1, .., .., ..]).insert_axis(Axis(0));
                let gm = gm.slice(s![nm-1, .., .., ..]).insert_axis(Axis(0));
                let nu2 = nu2.slice(s![nm-1, .., .., ..]).insert_axis(Axis(0));
                let nu = nu.slice(s![nm-1, .., .., ..]).insert_axis(Axis(0));
                let a_const = a_const.slice(s![nm-1, .., .., ..]).insert_axis(Axis(0));

                // calculate only for the last medium
                // c_phi
                let c_phi = (-0.5 + 0.0 * I)
                    * ((cmat[0][0] * &kx2 + cmat[1][1] * &ky2 + 2.0 * cmat[0][1] * &kx_ky) / &nu
                        - 2.0 * cmat[0][2] * &kx_arr
                        - 2.0 * cmat[1][2] * &ky_arr
                        + cmat[2][2] * &nu);

                // c_psi_sv
                let c_psi_sv = -((cmat[0][0] - cmat[2][2]) * &kx2
                    + (cmat[1][1] - cmat[2][2]) * &ky2
                    + (cmat[0][2] * &kx_arr + cmat[1][2] * &ky_arr) * (&k2 - &gm2) / &gm
                    + 2.0 * cmat[0][1] * &kx_ky)
                    / &k;

                // c_psi_sh
                let c_psi_sh = -((cmat[0][0] - cmat[1][1]) * &kx_ky - cmat[0][1] * (&kx2 - &ky2)
                    + (cmat[1][2] * &kx_arr - cmat[0][2] * &ky_arr) * &gm)
                    * (&gm2 + &k2)
                    / (&gm * &k);

                let kern_phi = I * &a_const * &c_phi * &rr00; 
                let kern_psi_sv = 0.5 * I * &a_const * &c_psi_sv * &rr01; 
                let kern_psi_sh = 0.5 * C1 * &a_const * &c_psi_sh * &rrsh;

                let kern_phi_x_arr = &kern_phi * &kx_arr / &k;
                let kern_phi_y_arr = &kern_phi * &ky_arr / &k;
                let kern_psi_sv_x_arr = &kern_psi_sv * &kx_arr / &k;
                let kern_psi_sv_y_arr = &kern_psi_sv * &ky_arr / &k;
                let kern_psi_sh_x_arr = &kern_psi_sh * &ky_arr / &k;
                let kern_psi_sh_y_arr = -&kern_psi_sh * &kx_arr / &k;
                let kern_phi_z_arr = I * &a_const * &c_phi * &rr10; 
                let kern_psi_sv_z_arr = 0.5 * I * &a_const * &c_psi_sv * &rr11; 

                (
                    ukey,
                    (
                        kx_arr.to_owned(), // krl[&ukey].0
                        ky_arr.to_owned(), // krl[&ukey].1
                        nu.to_owned(),     // krl[&ukey].2
                        gm.to_owned(),     // krl[&ukey].3
                        kern_phi_x_arr,    // krl[&ukey].4
                        kern_phi_y_arr,    // krl[&ukey].5
                        kern_psi_sv_x_arr, // krl[&ukey].6
                        kern_psi_sv_y_arr, // krl[&ukey].7
                        kern_psi_sh_x_arr, // krl[&ukey].8
                        kern_psi_sh_y_arr, // krl[&ukey].9
                        kern_phi_z_arr,    // krl[&ukey].10
                        kern_psi_sv_z_arr, // krl[&ukey].11
                    ),
                )
            })
            .collect();
        // I matrices

        let toc_init = tic_init.elapsed();
        // println!(\"time elapsed [initialization] : {:?}\",toc_init);
        Fault {
            // dims,
            angles,
            loc,
            fpars,
            medium,
            conf,
            krl,
            w,
            w2,
        }
    }

    pub fn simulate(
        &self,
        sloc: Vec<((f64,f64," . 9834) (undo-tree-id0 . -34730) 2459) nil (25336 38466 509188 624000) 0 nil])
([nil nil ((3259 . 3263) (t 25336 38466 532369 24000)) nil (25336 38516 643138 673000) 0 nil])
([nil nil ((3263 . 3267)) nil (25336 38516 643137 977000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -3266) (undo-tree-id16 . -1) 3267) nil (25336 38516 643137 313000) 0 nil])
([nil nil ((3266 . 3274)) nil (25336 38516 643135 981000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3261) (undo-tree-id3 . -1) (#(" " 0 1 (fontified t)) . -3262) (undo-tree-id4 . -1) (#("t" 0 1 (fontified t)) . -3263) (undo-tree-id5 . -1) (#("m" 0 1 (fontified t)) . -3264) (undo-tree-id6 . -1) (#("a" 0 1 (fontified t)) . -3265) (undo-tree-id7 . -1) (#("t" 0 1 (fontified t)) . -3266) (undo-tree-id8 . -1) (#("." 0 1 (fontified t)) . -3267) (undo-tree-id9 . -1) (#("c" 0 1 (fontified t)) . -3268) (undo-tree-id10 . -1) (#("o" 0 1 (fontified t)) . -3269) (undo-tree-id11 . -1) (#("n" 0 1 (fontified t)) . -3270) (undo-tree-id12 . -1) (#("c" 0 1 (fontified t)) . -3271) (undo-tree-id13 . -1) (#("a" 0 1 (fontified t)) . -3272) (undo-tree-id14 . -1) (#("t" 0 1 (fontified t)) . -3273) (undo-tree-id15 . -1) 3274) nil (25336 38516 643133 34000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3258) (undo-tree-id0 . -1) (#(" " 0 1 (fontified t)) . -3259) (undo-tree-id1 . -1) (#(" " 0 1 (fontified t)) . -3260) (undo-tree-id2 . -1) 3261) nil (25336 38516 643120 141000) 0 nil])
([nil nil ((3103 . 3105) (t 25336 38516 656320 576000)) nil (25336 38563 85316 97000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -3103) (undo-tree-id17 . -1) (#("." 0 1 (fontified t)) . -3104) (undo-tree-id18 . -1) 3105) nil (25336 38563 85312 520000) 0 nil])
([nil nil ((299 . 300) (t 25336 38516 656320 576000)) nil (25336 39512 387611 704000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -299) (undo-tree-id0 . -1) 300) nil (25336 39512 387608 645000) 0 nil])
([nil nil ((357 . 360) (t 25336 39512 399665 141000)) nil (25336 40161 997228 109000) 0 nil])
([nil nil ((359 . 362)) nil (25336 40161 997227 419000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -360) (undo-tree-id27 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -361) (undo-tree-id28 . -1) 362) nil (25336 40161 997226 662000) 0 nil])
([nil nil ((360 . 362)) nil (25336 40161 997224 561000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -359) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("e" 0 1 (fontified t)) . -360) (undo-tree-id25 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -361) (undo-tree-id26 . -1) 362) nil (25336 40161 997223 211000) 0 nil])
([nil nil ((359 . 360)) nil (25336 40161 997218 959000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -359) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 360) nil (25336 40161 997217 922000) 0 nil])
([nil nil ((359 . 361)) nil (25336 40161 997215 602000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -359) (undo-tree-id19 . -1) (#("f" 0 1 (fontified t)) . -360) (undo-tree-id20 . -1) 361) nil (25336 40161 997214 529000) 0 nil])
([nil nil ((359 . 360)) nil (25336 40161 997212 473000) 0 nil])
([nil nil ((360 . 361)) nil (25336 40161 997212 50000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -359) (undo-tree-id17 . -1) (#("a" 0 1 (fontified t)) . -360) (undo-tree-id18 . -1) 361) nil (25336 40161 997211 153000) 0 nil])
([nil nil ((359 . 362)) nil (25336 40161 997209 121000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -358) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("u" 0 1 (fontified t)) . -359) (undo-tree-id14 . -1) (#("s" 0 1 (fontified t)) . -360) (undo-tree-id15 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -361) (undo-tree-id16 . -1) 362) nil (25336 40161 997207 254000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -357) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("
" 0 1 (fontified t)) . -358) (undo-tree-id6 . -1) (undo-tree-id7 . 1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) 359) nil (25336 40161 997199 818000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -356) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 357 (t 25336 40162 9865 786000)) nil (25336 40164 384732 686000) 0 nil])
([nil nil ((apply -3 4665 4737 undo--wrap-and-run-primitive-undo 4665 4737 ((4673 . 4676) 4677)) (t 25336 40164 399871 72000)) nil (25336 40204 901882 741000) 0 nil])
([nil nil ((4733 . 4737) (apply 3 4665 4733 undo--wrap-and-run-primitive-undo 4665 4733 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -4673) 4680))) nil (25336 40204 901881 794000) 0 nil])
([nil nil ((#(" // " 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t)) . 4733) (undo-tree-id20 . -4) 4737) nil (25336 40204 902915 948000) 0 nil])
([nil nil ((#("                // ---------------------------------------------------------------------------------------------------------------" 0 16 (fontified t) 16 19 (face font-lock-comment-delimiter-face fontified t) 19 130 (face font-lock-comment-face fontified t)) . 15102) (undo-tree-id29 . -130) (undo-tree-id30 . -130) (undo-tree-id31 . -130) (undo-tree-id32 . -129) (undo-tree-id33 . -128) (undo-tree-id34 . -125) (undo-tree-id35 . -124) (undo-tree-id36 . -123) (undo-tree-id37 . -122) (undo-tree-id38 . -2) (undo-tree-id39 . -1) (undo-tree-id40 . -130) (undo-tree-id41 . -130)) nil (25336 40495 163788 724000) 0 nil] [nil nil ((4677 . 4681) (#("w" 0 1 (face font-lock-variable-name-face fontified t)) . 4677) (undo-tree-id19 . -1) (4769 . 4773) (#("w" 0 1 (fontified t)) . 4769)) ((4769 . 4770) (#("haha" 0 4 (fontified t)) . 4769) (4677 . 4678) (#("haha" 0 4 (face font-lock-variable-name-face fontified t)) . 4677)) (25336 40204 901874 683000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -15101) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) 15102) nil (25336 40495 163771 698000) 0 nil])
nil
([nil nil ((1067 . 1068) (t 25336 40495 175602 760000)) nil (25336 40514 832593 78000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1068)) nil (25336 40514 832579 99000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -32267) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("m" 0 1 (fontified t)) . -32268) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#(" " 0 1 (fontified t)) . -32269) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (#("-" 0 1 (fontified t)) . -32270) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#(" " 0 1 (fontified t)) . -32271) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("3" 0 1 (fontified t)) . -32272) (undo-tree-id125 . -1) (undo-tree-id126 . -1) 32273 (t 25336 40514 844647 680000)) nil (25336 40635 285723 294000) 0 nil])
([nil nil ((32267 . 32268)) nil (25336 40635 285423 329000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -32358) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("m" 0 1 (fontified t)) . -32359) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#(" " 0 1 (fontified t)) . -32360) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("-" 0 1 (fontified t)) . -32361) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#(" " 0 1 (fontified t)) . -32362) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("3" 0 1 (fontified t)) . -32363) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 32364) nil (25336 40635 285418 204000) 0 nil])
([nil nil ((32358 . 32359)) nil (25336 40635 285340 619000) 0 nil])
([nil nil ((32120 . 32144) (#("                        " 0 24 (fontified nil)) . 32119) (undo-tree-id212 . -24) (32118 . 32144) (t 25336 40635 298944 690000)) nil (25336 40773 850943 411000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -32123) (undo-tree-id191 . -1) (#(" " 0 1 (fontified t)) . -32124) (undo-tree-id192 . -1) (#(" " 0 1 (fontified t)) . -32125) (undo-tree-id193 . -1) (#(" " 0 1 (fontified t)) . -32126) (undo-tree-id194 . -1) (#(" " 0 1 (fontified t)) . -32127) (undo-tree-id195 . -1) (#(" " 0 1 (fontified t)) . -32128) (undo-tree-id196 . -1) (#(" " 0 1 (fontified t)) . -32129) (undo-tree-id197 . -1) (#(" " 0 1 (fontified t)) . -32130) (undo-tree-id198 . -1) (#(" " 0 1 (fontified t)) . -32131) (undo-tree-id199 . -1) (#(" " 0 1 (fontified t)) . -32132) (undo-tree-id200 . -1) (#(" " 0 1 (fontified t)) . -32133) (undo-tree-id201 . -1) (#(" " 0 1 (fontified t)) . -32134) (undo-tree-id202 . -1) (#(" " 0 1 (fontified t)) . -32135) (undo-tree-id203 . -1) (#(" " 0 1 (fontified t)) . -32136) (undo-tree-id204 . -1) (#(" " 0 1 (fontified t)) . -32137) (undo-tree-id205 . -1) (#(" " 0 1 (fontified t)) . -32138) (undo-tree-id206 . -1) (#(" " 0 1 (fontified t)) . -32139) (undo-tree-id207 . -1) (#(" " 0 1 (fontified t)) . -32140) (undo-tree-id208 . -1) (#(" " 0 1 (fontified t)) . -32141) (undo-tree-id209 . -1) (#(" " 0 1 (fontified t)) . -32142) (undo-tree-id210 . -1) (#(" " 0 1 (fontified t)) . -32143) (undo-tree-id211 . -1) 32144) nil (25336 40773 850933 563000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -32118) (undo-tree-id186 . -1) (#("
" 0 1 (fontified t)) . -32119) (undo-tree-id187 . -1) (#(" " 0 1 (fontified t)) . -32120) (undo-tree-id188 . -1) (#(" " 0 1 (fontified t)) . -32121) (undo-tree-id189 . -1) (#(" " 0 1 (fontified t)) . -32122) (undo-tree-id190 . -1) 32123) nil (25336 40773 850899 930000) 0 nil])
([nil nil ((32118 . 32143)) nil (25336 40773 850891 737000) 0 nil])
([nil nil ((32143 . 32147)) nil (25336 40773 850890 888000) 0 nil])
([nil nil ((32147 . 32154)) nil (25336 40773 850890 93000) 0 nil])
([nil nil ((32154 . 32179)) nil (25336 40773 850889 246000) 0 nil])
([nil nil ((32120 . 32144) (#("                        " 0 24 (fontified nil)) . 32119) (undo-tree-id185 . -24) (32143 . 32144)) nil (25336 40773 850888 165000) 0 nil])
([nil nil ((32119 . 32143)) nil (25336 40773 850885 400000) 0 nil])
([nil nil ((32143 . 32146)) nil (25336 40773 850884 538000) 0 nil])
([nil nil ((32146 . 32147)) nil (25336 40773 850883 451000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -32143) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (#("e" 0 1 (fontified t)) . -32144) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -32145) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#(" " 0 1 (fontified t)) . -32146) (undo-tree-id184 . -1) 32147) nil (25336 40773 850881 176000) 0 nil])
([nil nil ((32143 . 32145)) nil (25336 40773 850871 470000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -32144) (undo-tree-id177 . -1) 32145) nil (25336 40773 850870 187000) 0 nil])
([nil nil ((32144 . 32146)) nil (25336 40773 850867 643000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -32141) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#(" " 0 1 (fontified t)) . -32142) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("z" 0 1 (fontified t)) . -32143) (undo-tree-id174 . -1) (#("2" 0 1 (fontified t)) . -32144) (undo-tree-id175 . -1) (#("." 0 1 (fontified t)) . -32145) (undo-tree-id176 . -1) 32146) nil (25336 40773 850864 962000) 0 nil])
([nil nil ((32141 . 32145)) nil (25336 40773 850854 403000) 0 nil])
([nil nil ((32145 . 32155)) nil (25336 40773 850853 468000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -32154) (undo-tree-id169 . -1) 32155) nil (25336 40773 850852 147000) 0 nil])
([nil nil ((32154 . 32158)) nil (25336 40773 850849 851000) 0 nil])
([nil nil ((32158 . 32159)) nil (25336 40773 850848 985000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -32158) (undo-tree-id168 . -1) 32159) nil (25336 40773 850847 695000) 0 nil])
([nil nil ((32158 . 32161)) nil (25336 40773 850845 588000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t)) . -32157) (undo-tree-id164 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -32158) (undo-tree-id165 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -32159) (undo-tree-id166 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -32160) (undo-tree-id167 . -1) 32161) nil (25336 40773 850844 337000) 0 nil])
([nil nil ((32157 . 32162)) nil (25336 40773 850840 516000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -32157) (undo-tree-id159 . -1) (#("u" 0 1 (fontified t)) . -32158) (undo-tree-id160 . -1) (#("l" 0 1 (fontified t)) . -32159) (undo-tree-id161 . -1) (#("l" 0 1 (fontified t)) . -32160) (undo-tree-id162 . -1) (#(" " 0 1 (fontified t)) . -32161) (undo-tree-id163 . -1) 32162) nil (25336 40773 850839 75000) 0 nil])
([nil nil ((#("                        let z2_m_z1 = " 0 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 35 (face font-lock-variable-name-face fontified t) 35 38 (fontified t)) . 32119) (undo-tree-id156 . -38) (undo-tree-id157 . -22) (undo-tree-id158 . -38)) nil (25336 40773 850834 614000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -32118) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) 32119) nil (25336 40773 850831 484000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -32153) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 32154) nil (25336 40773 850827 825000) 0 nil])
([nil nil ((32153 . 32155)) nil (25336 40773 850820 266000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-9-face) fontified nil)) . -32153) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-9-face) fontified t)) . 32154) (undo-tree-id147 . -1)) nil (25336 40773 850818 210000) 0 nil])
([nil nil ((32153 . 32155)) nil (25336 40773 850796 378000) 0 nil])
([nil nil ((32156 . 32184) (#("                            " 0 28 (fontified nil)) . 32155) (undo-tree-id132 . -28) (undo-tree-id133 . -28) (undo-tree-id134 . -28) (32155 . 32184) (32156 . 32180) (#("                            " 0 28 (face (rainbow-delimiters-depth-9-face) fontified nil)) . 32155) (32155 . 32183) (32154 . 32156)) nil (25336 40773 851857 902000) 0 nil])
([nil nil ((#("                        " 0 24 (fontified nil)) . 32119) (32119 . 32143) (32119 . 32120)) nil (25336 40842 943568 846000) 0 nil] [nil nil ((#("                        let z2_m_z1 = med3_vec[1];" 0 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 35 (face font-lock-variable-name-face fontified t) 35 46 (fontified t) 46 47 (face (rainbow-delimiters-depth-9-face) fontified t) 47 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-9-face) fontified t) 49 50 (fontified t)) . 32236) (undo-tree-id127 . -24) (undo-tree-id128 . -24) (undo-tree-id129 . 26) (undo-tree-id130 . -28) (undo-tree-id131 . -50)) ((32236 . 32286)) (25336 40773 850782 624000) 0 nil])
([nil nil ((32119 . 32143)) nil (25336 40842 943568 231000) 0 nil])
nil
([nil nil ((32143 . 32151)) nil (25336 40842 943567 834000) 0 nil])
([nil nil ((32151 . 32157)) nil (25336 40842 943567 404000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -32152) (undo-tree-id776 . -1) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -32153) (undo-tree-id777 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -32154) (undo-tree-id778 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -32155) (undo-tree-id779 . -1) (#(" " 0 1 (fontified t)) . -32156) (undo-tree-id780 . -1) 32157) nil (25336 40842 943566 457000) 0 nil])
([nil nil ((32152 . 32155)) nil (25336 40842 943561 407000) 0 nil])
([nil nil ((32155 . 32183) (#(" " 0 1 (fontified nil)) . 32154) (undo-tree-id775 . -1) (32155 . 32156)) nil (25336 40842 943560 745000) 0 nil])
([nil nil ((32183 . 32184)) nil (25336 40842 943559 332000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -32165) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (#(" " 0 1 (fontified t)) . -32166) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (#(" " 0 1 (fontified t)) . -32167) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#(" " 0 1 (fontified t)) . -32168) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (#(" " 0 1 (fontified t)) . -32169) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (#(" " 0 1 (fontified t)) . -32170) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#(" " 0 1 (fontified t)) . -32171) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (#(" " 0 1 (fontified t)) . -32172) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (#(" " 0 1 (fontified t)) . -32173) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#(" " 0 1 (fontified t)) . -32174) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (#(" " 0 1 (fontified t)) . -32175) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#(" " 0 1 (fontified t)) . -32176) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#(" " 0 1 (fontified t)) . -32177) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (#(" " 0 1 (fontified t)) . -32178) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (#(" " 0 1 (fontified t)) . -32179) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#(" " 0 1 (fontified t)) . -32180) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (#(" " 0 1 (fontified t)) . -32181) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (#(" " 0 1 (fontified t)) . -32182) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (#("=" 0 1 (fontified t)) . -32183) (undo-tree-id773 . -1) (undo-tree-id774 . -1) 32184) nil (25336 40842 943550 448000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -32154) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#(" " 0 1 (fontified t)) . -32155) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (#(" " 0 1 (fontified t)) . -32156) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (#(" " 0 1 (fontified t)) . -32157) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (#(" " 0 1 (fontified t)) . -32158) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (#(" " 0 1 (fontified t)) . -32159) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#(" " 0 1 (fontified t)) . -32160) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#(" " 0 1 (fontified t)) . -32161) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (#(" " 0 1 (fontified t)) . -32162) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#(" " 0 1 (fontified t)) . -32163) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (#(" " 0 1 (fontified t)) . -32164) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) 32165) nil (25336 40842 943358 461000) 0 nil])
([nil nil ((32154 . 32155)) nil (25336 40842 943126 724000) 0 nil])
([nil nil ((32147 . 32152)) nil (25336 40842 943126 160000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . -32149) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -32150) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#(" " 0 1 (fontified t)) . -32151) (undo-tree-id247 . -1) (undo-tree-id248 . -1) 32152) nil (25336 40842 943124 911000) 0 nil])
([nil nil ((32149 . 32151)) nil (25336 40842 943115 965000) 0 nil])
([nil nil ((#("                        let mut z2_m_z1 
                        if nm == 3{

                            
                        }" 0 24 (fontified t) 24 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 39 (face font-lock-variable-name-face fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 65 (fontified t) 65 67 (face font-lock-keyword-face fontified t) 67 74 (fontified t) 74 75 (fontified t) 75 76 (face (rainbow-delimiters-depth-9-face) fontified t) 76 77 (fontified t) 77 107 (fontified t) 107 131 (fontified t) 131 132 (face (rainbow-delimiters-depth-9-face) fontified t)) . 32119) (undo-tree-id129 . -132) (undo-tree-id130 . -39) (undo-tree-id131 . -39) (undo-tree-id132 . -39) (undo-tree-id133 . -39) (undo-tree-id134 . -39) (undo-tree-id135 . -39) (undo-tree-id136 . -39) (undo-tree-id137 . -39) (undo-tree-id138 . -39) (undo-tree-id139 . -39) (undo-tree-id140 . -39) (undo-tree-id141 . -39) (undo-tree-id142 . -39) (undo-tree-id143 . -39) (undo-tree-id144 . -39) (undo-tree-id145 . -39) (undo-tree-id146 . -39) (undo-tree-id147 . -39) (undo-tree-id148 . -39) (undo-tree-id149 . -39) (undo-tree-id150 . -39) (undo-tree-id151 . -39) (undo-tree-id152 . -39) (undo-tree-id153 . -39) (undo-tree-id154 . -39) (undo-tree-id155 . -39) (undo-tree-id156 . -39) (undo-tree-id157 . -39) (undo-tree-id158 . -39) (undo-tree-id159 . -39) (undo-tree-id160 . -39) (undo-tree-id161 . -28) (undo-tree-id162 . -30) (undo-tree-id163 . -30) (undo-tree-id164 . -30) (undo-tree-id165 . -30) (undo-tree-id166 . -30) (undo-tree-id167 . -32) (undo-tree-id168 . -32) (undo-tree-id169 . -32) (undo-tree-id170 . -32) (undo-tree-id171 . -32) (undo-tree-id172 . -32) (undo-tree-id173 . -32) (undo-tree-id174 . -40) (undo-tree-id175 . -40) (undo-tree-id176 . -40) (undo-tree-id177 . -40) (undo-tree-id178 . -40) (undo-tree-id179 . -40) (undo-tree-id180 . -40) (undo-tree-id181 . -39) (undo-tree-id182 . -40) (undo-tree-id183 . -40) (undo-tree-id184 . -40) (undo-tree-id185 . -40) (undo-tree-id186 . -40) (undo-tree-id187 . -40) (undo-tree-id188 . -40) (undo-tree-id189 . -39) (undo-tree-id190 . -37) (undo-tree-id191 . -35) (undo-tree-id192 . -33) (undo-tree-id193 . -32) (undo-tree-id194 . -29) (undo-tree-id195 . -28) (undo-tree-id196 . -26) (undo-tree-id197 . -25) (undo-tree-id198 . -23) (undo-tree-id199 . -22) (undo-tree-id200 . -21) (undo-tree-id201 . -20) (undo-tree-id202 . -19) (undo-tree-id203 . -18) (undo-tree-id204 . -17) (undo-tree-id205 . -16) (undo-tree-id206 . -15) (undo-tree-id207 . -14) (undo-tree-id208 . -13) (undo-tree-id209 . -12) (undo-tree-id210 . -11) (undo-tree-id211 . -10) (undo-tree-id212 . -9) (undo-tree-id213 . -8) (undo-tree-id214 . -6) (undo-tree-id215 . -5) (undo-tree-id216 . -4) (undo-tree-id217 . -3) (undo-tree-id218 . -2) (undo-tree-id219 . -1) (undo-tree-id220 . -40) (undo-tree-id221 . -132) (undo-tree-id222 . -132) (undo-tree-id223 . -132) (undo-tree-id224 . -132) (undo-tree-id225 . -104) (undo-tree-id226 . -102) (undo-tree-id227 . -77) (undo-tree-id228 . -59) (undo-tree-id229 . -58) (undo-tree-id230 . -57) (undo-tree-id231 . -15) (undo-tree-id232 . -14) (undo-tree-id233 . -13) (undo-tree-id234 . -132) (undo-tree-id235 . -40) (undo-tree-id236 . -132)) nil (25336 40842 943112 710000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -32118) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 32119) nil (25336 40842 943013 319000) 0 nil])
([nil nil ((#("                        " 0 24 (fontified t)) . 32119) 32118) nil (25336 40842 942850 462000) 0 nil])
([nil nil ((32120 . 32144) (#("                        " 0 24 (fontified nil)) . 32119) (32119 . 32143) (32119 . 32120) (t 25336 40842 958456 719000)) nil (25336 62311 593518 418000) 0 nil])
([nil nil ((32144 . 32147)) nil (25336 62311 593516 211000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -32126) (undo-tree-id8 . -1) (#(" " 0 1 (fontified nil)) . -32127) (undo-tree-id9 . -1) (#(" " 0 1 (fontified nil)) . -32128) (undo-tree-id10 . -1) (#(" " 0 1 (fontified t)) . -32129) (undo-tree-id11 . -1) (#(" " 0 1 (fontified t)) . -32130) (undo-tree-id12 . -1) (#(" " 0 1 (fontified t)) . -32131) (undo-tree-id13 . -1) (#(" " 0 1 (fontified t)) . -32132) (undo-tree-id14 . -1) (#(" " 0 1 (fontified t)) . -32133) (undo-tree-id15 . -1) (#(" " 0 1 (fontified t)) . -32134) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -32135) (undo-tree-id17 . -1) (#(" " 0 1 (fontified t)) . -32136) (undo-tree-id18 . -1) (#(" " 0 1 (fontified t)) . -32137) (undo-tree-id19 . -1) (#(" " 0 1 (fontified t)) . -32138) (undo-tree-id20 . -1) (#(" " 0 1 (fontified nil)) . -32139) (undo-tree-id21 . -1) (#(" " 0 1 (fontified nil)) . -32140) (undo-tree-id22 . -1) (#(" " 0 1 (fontified t)) . -32141) (undo-tree-id23 . -1) (#(" " 0 1 (fontified t)) . -32142) (undo-tree-id24 . -1) (#(" " 0 1 (fontified t)) . -32143) (undo-tree-id25 . -1) (#("i" 0 1 (fontified t)) . -32144) (undo-tree-id26 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -32145) (undo-tree-id27 . -1) (#(" " 0 1 (fontified t)) . -32146) (undo-tree-id28 . -1) 32147) nil (25336 62311 593510 408000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -32118) (undo-tree-id0 . -1) (#("
" 0 1 (fontified t)) . -32119) (undo-tree-id1 . -1) (#(" " 0 1 (fontified t)) . -32120) (undo-tree-id2 . -1) (#(" " 0 1 (fontified t)) . -32121) (undo-tree-id3 . -1) (#(" " 0 1 (fontified t)) . -32122) (undo-tree-id4 . -1) (#(" " 0 1 (fontified t)) . -32123) (undo-tree-id5 . -1) (#(" " 0 1 (fontified t)) . -32124) (undo-tree-id6 . -1) (#(" " 0 1 (fontified nil)) . -32125) (undo-tree-id7 . -1) 32126) nil (25336 62311 593474 843000) 0 nil])
([nil nil ((32058 . 32083) (t 25336 62311 608423 180000)) nil (25336 62396 971112 282000) 0 nil])
([nil nil ((32083 . 32086)) nil (25336 62396 971111 490000) 0 nil])
([nil nil ((32086 . 32087)) nil (25336 62396 971110 483000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -32083) (undo-tree-id36 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -32084) (undo-tree-id37 . -1) (#(" " 0 1 (fontified t)) . -32085) (undo-tree-id38 . -1) (#("z" 0 1 (fontified t)) . -32086) (undo-tree-id39 . -1) 32087) nil (25336 62396 971109 86000) 0 nil])
([nil nil ((32083 . 32086)) nil (25336 62396 971104 481000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -32085) (undo-tree-id35 . -1) 32086) nil (25336 62396 971103 737000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -32083) (undo-tree-id33 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -32084) (undo-tree-id34 . -1) 32085) nil (25336 62396 971100 919000) 0 nil])
([nil nil ((32058 . 32059)) nil (25336 62396 971097 228000) 0 nil])
([nil nil ((32059 . 32062)) nil (25336 62396 971096 244000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t)) . -32059) (undo-tree-id30 . -1) (#(" " 0 1 (fontified t)) . -32060) (undo-tree-id31 . -1) (#("o" 0 1 (fontified t)) . -32061) (undo-tree-id32 . -1) 32062) nil (25336 62396 971094 962000) 0 nil])
([nil nil ((32059 . 32070)) nil (25336 62396 971090 201000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-comment-face fontified t)) . -32069) (undo-tree-id29 . -1) 32070) nil (25336 62396 971088 785000) 0 nil])
([nil nil ((32069 . 32072)) nil (25336 62396 971076 387000) 0 nil])
([nil nil ((#("                        " 0 24 (fontified t)) . 32073) 32072) nil (25336 62476 988256 630000) 0 nil])
([nil nil ((32073 . 32097) (t 25336 62396 882851 187000)) nil (25336 62476 988255 402000) 0 nil])
([nil nil ((32097 . 32102)) nil (25336 62476 988254 143000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -32100) (undo-tree-id7 . -1) (#(" " 0 1 (fontified t)) . -32101) (undo-tree-id8 . -1) 32102) nil (25336 62476 988252 932000) 0 nil])
([nil nil ((32100 . 32101)) nil (25336 62476 988249 641000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -32097) (undo-tree-id3 . -1) (#("e" 0 1 (fontified t)) . -32098) (undo-tree-id4 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -32099) (undo-tree-id5 . -1) (#(" " 0 1 (fontified t)) . -32100) (undo-tree-id6 . -1) 32101) nil (25336 62476 988247 770000) 0 nil])
([nil nil ((#("                        " 0 24 (fontified t)) . -32073) (undo-tree-id0 . -24) (undo-tree-id1 . -24) (undo-tree-id2 . -24) 32097) nil (25336 62476 988238 724000) 0 nil])
([nil nil ((32073 . 32097) (t 25336 62477 2797 333000)) nil (25336 62643 690764 182000) 0 nil])
([nil nil ((32618 . 32642) (#("                        " 0 24 (fontified nil)) . 32617) (undo-tree-id14 . -24) (32617 . 32642) (#("                        " 0 24 (fontified nil)) . 32616) (undo-tree-id15 . -24) (32616 . 32641) (#("                        " 0 24 (fontified nil)) . 32615) (32615 . 32639) (32615 . 32616)) nil (25336 62643 690762 699000) 0 nil])
([nil nil ((32642 . 32645)) nil (25336 62643 690759 676000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -32642) (undo-tree-id11 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -32643) (undo-tree-id12 . -1) (#(" " 0 1 (fontified t)) . -32644) (undo-tree-id13 . -1) 32645) nil (25336 62643 690758 540000) 0 nil])
([nil nil ((32642 . 32644)) nil (25336 62643 690755 260000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -32642) (undo-tree-id9 . -1) (#("b" 0 1 (fontified t)) . -32643) (undo-tree-id10 . -1) 32644) nil (25336 62643 690754 174000) 0 nil])
([nil nil ((32642 . 32651)) nil (25336 62643 690751 125000) 0 nil])
([nil nil ((32651 . 32659)) nil (25336 62643 690749 951000) 0 nil])
([nil nil ((32073 . 32590) (#("                        
                        let z2 = med3_vec[1] + med3_vec[0];
                        let z2_m_z1 = med3_vec[1];

                        // first layer
                        let e1_z1_nu = (I * &nu.slice(s![0, ii, jj, 0]).sum() * z1).exp();
                        let e1_z1_gm = (I * &gm.slice(s![0, ii, jj, 0]).sum() * z1).exp();

                        let e1_z1 = Matrix2::<c64>::new(e1_z1_nu, C0, C0, e1_z1_gm);
                        let e1_mz1 = Matrix2::<c64>::new(1.0 / e1_z1_nu, C0, C0, 1.0 / e1_z1_gm);

" 0 24 (fontified t) 24 25 (fontified t) 25 49 (fontified t) 49 52 (face font-lock-keyword-face fontified t) 52 53 (fontified t) 53 55 (face font-lock-variable-name-face fontified t) 55 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-9-face) fontified t) 67 68 (fontified t) 68 69 (face (rainbow-delimiters-depth-9-face) fontified t) 69 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-9-face) fontified t) 81 82 (fontified t) 82 83 (face (rainbow-delimiters-depth-9-face) fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 109 (fontified t) 109 112 (face font-lock-keyword-face fontified t) 112 113 (fontified t) 113 120 (face font-lock-variable-name-face fontified t) 120 131 (fontified t) 131 132 (face (rainbow-delimiters-depth-9-face) fontified t) 132 133 (fontified t) 133 134 (face (rainbow-delimiters-depth-9-face) fontified t) 134 161 (fontified t) 161 164 (face font-lock-comment-delimiter-face fontified t) 164 176 (face font-lock-comment-face fontified t) 176 200 (fontified t) 200 203 (face font-lock-keyword-face fontified t) 203 204 (fontified t) 204 212 (face font-lock-variable-name-face fontified t) 212 215 (fontified t) 215 216 (face (rainbow-delimiters-depth-9-face) fontified t) 216 217 (face font-lock-type-face fontified t) 217 220 (fontified t) 220 221 (face rust-ampersand-face fontified t) 221 229 (fontified t) 229 230 (face (rainbow-delimiters-depth-1-face) fontified t) 230 232 (face font-lock-preprocessor-face fontified t) 232 233 (face (rainbow-delimiters-depth-2-face) fontified t) 233 245 (fontified t) 245 246 (face (rainbow-delimiters-depth-2-face) fontified t) 246 247 (face (rainbow-delimiters-depth-1-face) fontified t) 247 251 (fontified t) 251 252 (face (rainbow-delimiters-depth-1-face) fontified t) 252 253 (face (rainbow-delimiters-depth-1-face) fontified t) 253 258 (fontified t) 258 259 (face (rainbow-delimiters-depth-9-face) fontified t) 259 263 (fontified t) 263 264 (face (rainbow-delimiters-depth-9-face) fontified t) 264 265 (face (rainbow-delimiters-depth-9-face) fontified t) 265 291 (fontified t) 291 294 (face font-lock-keyword-face fontified t) 294 295 (fontified t) 295 303 (face font-lock-variable-name-face fontified t) 303 306 (fontified t) 306 307 (face (rainbow-delimiters-depth-9-face) fontified t) 307 308 (face font-lock-type-face fontified t) 308 311 (fontified t) 311 312 (face rust-ampersand-face fontified t) 312 320 (fontified t) 320 321 (face (rainbow-delimiters-depth-1-face) fontified t) 321 323 (face font-lock-preprocessor-face fontified t) 323 324 (face (rainbow-delimiters-depth-2-face) fontified t) 324 336 (fontified t) 336 337 (face (rainbow-delimiters-depth-2-face) fontified t) 337 338 (face (rainbow-delimiters-depth-1-face) fontified t) 338 342 (fontified t) 342 343 (face (rainbow-delimiters-depth-1-face) fontified t) 343 344 (face (rainbow-delimiters-depth-1-face) fontified t) 344 349 (fontified t) 349 350 (face (rainbow-delimiters-depth-9-face) fontified t) 350 354 (fontified t) 354 355 (face (rainbow-delimiters-depth-9-face) fontified t) 355 356 (face (rainbow-delimiters-depth-9-face) fontified t) 356 383 (fontified t) 383 386 (face font-lock-keyword-face fontified t) 386 387 (fontified t) 387 392 (face font-lock-variable-name-face fontified t) 392 395 (fontified t) 395 402 (face font-lock-type-face fontified t) 402 404 (fontified t) 404 405 (face (rainbow-delimiters-depth-9-face) fontified t) 405 408 (fontified t) 408 409 (face (rainbow-delimiters-depth-9-face) fontified t) 409 414 (fontified t) 414 415 (face (rainbow-delimiters-depth-9-face) fontified t) 415 425 (fontified t) 425 427 (face font-lock-type-face fontified t) 427 429 (fontified t) 429 431 (face font-lock-type-face fontified t) 431 441 (fontified t) 441 442 (face (rainbow-delimiters-depth-9-face) fontified t) 442 468 (fontified t) 468 471 (face font-lock-keyword-face fontified t) 471 472 (fontified t) 472 478 (face font-lock-variable-name-face fontified t) 478 481 (fontified t) 481 488 (face font-lock-type-face fontified t) 488 490 (fontified t) 490 491 (face (rainbow-delimiters-depth-9-face) fontified t) 491 494 (fontified t) 494 495 (face (rainbow-delimiters-depth-9-face) fontified t) 495 500 (fontified t) 500 501 (face (rainbow-delimiters-depth-9-face) fontified t) 501 517 (fontified t) 517 519 (face font-lock-type-face fontified t) 519 521 (fontified t) 521 523 (face font-lock-type-face fontified t) 523 539 (fontified t) 539 540 (face (rainbow-delimiters-depth-9-face) fontified t) 540 542 (fontified t) 542 543 (fontified t)) . 32073) (undo-tree-id0 . -52) (undo-tree-id1 . -72) (undo-tree-id2 . -73) (undo-tree-id3 . -135) (undo-tree-id4 . -84) (undo-tree-id5 . -135) (undo-tree-id6 . -84) (undo-tree-id7 . -84) (undo-tree-id8 . -24) 32659) nil (25336 62643 690746 199000) 0 nil])
([nil nil ((4178 . 4179) (t 25336 62643 706765 695000)) nil (25336 62972 33677 902000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -4178) (undo-tree-id0 . -1) 4179) nil (25336 62972 33674 536000) 0 nil])
([nil nil ((8847 . 8848) (t 25336 62973 310161 504000)) nil (25336 62983 628727 157000) 0 nil])
([nil current ((#("k" 0 1 (fontified t)) . -8847) (undo-tree-id0 . -1) 8848) nil (25336 62983 628723 543000) 0 nil])
nil
